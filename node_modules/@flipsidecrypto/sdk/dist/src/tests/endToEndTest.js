"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const flipside_1 = require("../flipside");
// @ts-ignore
const API_KEY = process.env.FLIPSIDE_API_KEY;
if (!API_KEY || API_KEY === "" || API_KEY.length === 0) {
    throw new Error("No API Key Provided");
}
const runIt = () => __awaiter(void 0, void 0, void 0, function* () {
    const flipside = new flipside_1.Flipside(API_KEY, "https://api-v2.flipsidecrypto.xyz");
    yield runWithSuccess(flipside);
    yield runWithError(flipside);
    yield pageThruResults(flipside);
    yield getQueryRunSuccess(flipside);
    yield getQueryRunError(flipside);
    yield cancelQueryRun(flipside);
});
function runWithSuccess(flipside) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        // Create a query object for the `query.run` function to execute
        const query = {
            sql: "select nft_address, mint_price_eth, mint_price_usd from ethereum.nft.ez_nft_mints limit 100",
            ttlMinutes: 10,
            pageSize: 5,
            pageNumber: 1,
            maxAgeMinutes: 10,
        };
        const result = yield flipside.query.run(query);
        const records = ((_a = result === null || result === void 0 ? void 0 : result.records) === null || _a === void 0 ? void 0 : _a.length) ? (_b = result === null || result === void 0 ? void 0 : result.records) === null || _b === void 0 ? void 0 : _b.length : 0;
        if (records > 0) {
            console.log("✅ runWithSuccess");
            return;
        }
        throw new Error("Failed runWithSuccess: no records returned");
    });
}
function runWithError(flipside) {
    return __awaiter(this, void 0, void 0, function* () {
        // Create a query object for the `query.run` function to execute
        const query = {
            sql: "select nft_address mint_price_eth mint_price_usd from ethereum.nft.ez_nft_mints limit 100",
            ttlMinutes: 10,
            pageSize: 5,
            pageNumber: 1,
            maxAgeMinutes: 10,
        };
        const result = yield flipside.query.run(query);
        if (!result.error) {
            throw new Error("❌ runWithSuccess");
        }
        console.log("✅ runWithError");
    });
}
function pageThruResults(flipside) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        // Create a query object for the `query.run` function to execute
        const query = {
            sql: "select nft_address, mint_price_eth, mint_price_usd from ethereum.nft.ez_nft_mints limit 100",
            ttlMinutes: 10,
            pageSize: 25,
            pageNumber: 1,
            maxAgeMinutes: 10,
        };
        const result = yield flipside.query.run(query);
        if (result.error || !result.queryId || !result.page) {
            throw new Error(`❌ pageThruResults: ${result.error}`);
        }
        let allRecords = [];
        let pageNumber = 1;
        let pageSize = 25;
        while (pageNumber <= result.page.totalPages) {
            const results = yield flipside.query.getQueryResults({ queryRunId: result.queryId, pageSize, pageNumber });
            if (results.records) {
                allRecords = [...allRecords, ...results.records];
            }
            if (((_a = results.page) === null || _a === void 0 ? void 0 : _a.currentPageNumber) !== pageNumber) {
                throw new Error("❌ pageThruResults: currentPageNumber does not match requested pageNumber");
            }
            pageNumber++;
        }
        if (allRecords.length !== 100 || allRecords.length !== ((_b = result.runStats) === null || _b === void 0 ? void 0 : _b.recordCount)) {
            throw new Error("❌ pageThruResults");
        }
        console.log("✅ pageThruResults");
    });
}
function getQueryRunSuccess(flipside) {
    return __awaiter(this, void 0, void 0, function* () {
        // Create a query object for the `query.run` function to execute
        const query = {
            sql: "select nft_address, mint_price_eth, mint_price_usd from ethereum.nft.ez_nft_mints limit 100",
            ttlMinutes: 10,
            pageSize: 5,
            pageNumber: 1,
            maxAgeMinutes: 10,
        };
        const result = yield flipside.query.run(query);
        const queryId = result.queryId || "";
        const queryRun = yield flipside.query.getQueryRun({ queryRunId: queryId });
        if (queryRun.errorName !== null) {
            throw new Error("❌ getQueryRunSuccess");
        }
        console.log("✅ getQueryRunSuccess");
    });
}
function getQueryRunError(flipside) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const queryRun = yield flipside.query.getQueryRun({ queryRunId: "randomid" });
        }
        catch (e) {
            if (e instanceof flipside_1.ApiError) {
                console.log("✅ getQueryRunError");
                return;
            }
        }
        throw new Error("❌ getQueryRunError");
    });
}
function cancelQueryRun(flipside) {
    return __awaiter(this, void 0, void 0, function* () {
        // Create a query object for the `query.run` function to execute
        const query = {
            sql: "select nft_address, mint_price_eth, mint_price_usd from ethereum.nft.ez_nft_mints limit 999",
            ttlMinutes: 10,
            pageSize: 5,
            pageNumber: 1,
            maxAgeMinutes: 0,
        };
        const queryRun = yield flipside.query.createQueryRun(query);
        try {
            yield flipside.query.cancelQueryRun({ queryRunId: queryRun.id });
        }
        catch (e) {
            console.log("❌ cancelQueryRun");
            throw e;
        }
        console.log("✅ cancelQueryRun");
    });
}
runIt();
//# sourceMappingURL=endToEndTest.js.map