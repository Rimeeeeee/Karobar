"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const __1 = require("..");
const query_integration_1 = require("../integrations/query-integration");
const types_1 = require("../types");
const api_mocks_1 = require("./mocks/api-mocks");
const create_query_run_1 = require("./mock-data/create-query-run");
const mock_data_1 = require("./mock-data");
let defaultQueryData = {
    sql: "select 1",
    ttlMinutes: 1,
};
(0, vitest_1.describe)("getQueryResults", () => {
    (0, vitest_1.it)("with page data", () => __awaiter(void 0, void 0, void 0, function* () {
        const api = (0, api_mocks_1.getMockApiClient)({
            createQueryResp: (0, create_query_run_1.createQueryRunResponse)("QUERY_STATE_SUCCESS"),
            getQueryRunResp: (0, mock_data_1.getQueryRunResponse)("QUERY_STATE_SUCCESS"),
            getQueryRunResultsResp: (0, mock_data_1.getQueryResultsResponse)("QUERY_STATE_SUCCESS"),
            getSqlStatementResp: (0, mock_data_1.getSqlStatementResponse)("t"),
            cancelQueryRunResp: (0, mock_data_1.cancelQueryRunResponse)(),
        });
        const queryIntegration = new query_integration_1.QueryIntegration(api);
        const result = yield queryIntegration.getQueryResults({
            queryRunId: "123",
            pageNumber: 1,
            pageSize: 1,
        });
        vitest_1.assert.equal(result.status, types_1.QueryStatusFinished);
    }));
    (0, vitest_1.it)("without page data", () => __awaiter(void 0, void 0, void 0, function* () {
        const api = (0, api_mocks_1.getMockApiClient)({
            createQueryResp: (0, create_query_run_1.createQueryRunResponse)("QUERY_STATE_SUCCESS"),
            getQueryRunResp: (0, mock_data_1.getQueryRunResponse)("QUERY_STATE_SUCCESS"),
            getQueryRunResultsResp: (0, mock_data_1.getQueryResultsResponse)("QUERY_STATE_SUCCESS"),
            getSqlStatementResp: (0, mock_data_1.getSqlStatementResponse)("t"),
            cancelQueryRunResp: (0, mock_data_1.cancelQueryRunResponse)(),
        });
        const queryIntegration = new query_integration_1.QueryIntegration(api);
        const result = yield queryIntegration.getQueryResults({
            queryRunId: "123",
        });
        vitest_1.assert.equal(result.status, types_1.QueryStatusFinished);
    }));
    (0, vitest_1.it)("with filters & sortby", () => __awaiter(void 0, void 0, void 0, function* () {
        const api = (0, api_mocks_1.getMockApiClient)({
            createQueryResp: (0, create_query_run_1.createQueryRunResponse)("QUERY_STATE_SUCCESS"),
            getQueryRunResp: (0, mock_data_1.getQueryRunResponse)("QUERY_STATE_SUCCESS"),
            getQueryRunResultsResp: (0, mock_data_1.getQueryResultsResponse)("QUERY_STATE_SUCCESS"),
            getSqlStatementResp: (0, mock_data_1.getSqlStatementResponse)("t"),
            cancelQueryRunResp: (0, mock_data_1.cancelQueryRunResponse)(),
        });
        const queryIntegration = new query_integration_1.QueryIntegration(api);
        const result = yield queryIntegration.getQueryResults({
            queryRunId: "123",
            filters: [
                {
                    column: "test",
                    eq: "test",
                },
                {
                    column: "test",
                    neq: "test",
                },
                {
                    column: "test",
                    gt: 5,
                },
                {
                    column: "test",
                    gte: 5,
                },
                {
                    column: "test",
                    lt: 5,
                },
                {
                    column: "test",
                    lte: 5,
                },
                {
                    column: "test",
                    like: "some value",
                },
                {
                    column: "test",
                    in: ["some value"],
                },
                {
                    column: "test",
                    in: [5],
                },
                {
                    column: "test",
                    notIn: ["some value"],
                },
                {
                    column: "test",
                    notIn: [5],
                },
            ],
            sortBy: [
                {
                    column: "test",
                    direction: "asc",
                },
                {
                    column: "test2",
                    direction: "desc",
                },
            ],
        });
        vitest_1.assert.equal(result.status, types_1.QueryStatusFinished);
    }));
});
(0, vitest_1.describe)("getQueryRun", () => {
    (0, vitest_1.it)("success", () => __awaiter(void 0, void 0, void 0, function* () {
        const api = (0, api_mocks_1.getMockApiClient)({
            createQueryResp: (0, create_query_run_1.createQueryRunResponse)("QUERY_STATE_SUCCESS"),
            getQueryRunResp: (0, mock_data_1.getQueryRunResponse)("QUERY_STATE_SUCCESS"),
            getQueryRunResultsResp: (0, mock_data_1.getQueryResultsResponse)("QUERY_STATE_SUCCESS"),
            getSqlStatementResp: (0, mock_data_1.getSqlStatementResponse)("t"),
            cancelQueryRunResp: (0, mock_data_1.cancelQueryRunResponse)(),
        });
        const queryIntegration = new query_integration_1.QueryIntegration(api);
        const result = yield queryIntegration.getQueryRun({ queryRunId: "123" });
        vitest_1.assert.equal(result.state, "QUERY_STATE_SUCCESS");
    }));
    (0, vitest_1.it)("streaming", () => __awaiter(void 0, void 0, void 0, function* () {
        const api = (0, api_mocks_1.getMockApiClient)({
            createQueryResp: (0, create_query_run_1.createQueryRunResponse)("QUERY_STATE_STREAMING"),
            getQueryRunResp: (0, mock_data_1.getQueryRunResponse)("QUERY_STATE_STREAMING"),
            getQueryRunResultsResp: (0, mock_data_1.getQueryResultsResponse)("QUERY_STATE_STREAMING"),
            getSqlStatementResp: (0, mock_data_1.getSqlStatementResponse)("t"),
            cancelQueryRunResp: (0, mock_data_1.cancelQueryRunResponse)(),
        });
        const queryIntegration = new query_integration_1.QueryIntegration(api);
        const result = yield queryIntegration.getQueryRun({ queryRunId: "123" });
        vitest_1.assert.equal(result.state, "QUERY_STATE_STREAMING");
    }));
    (0, vitest_1.it)("failed", () => __awaiter(void 0, void 0, void 0, function* () {
        const api = (0, api_mocks_1.getMockApiClient)({
            createQueryResp: (0, create_query_run_1.createQueryRunResponse)("QUERY_STATE_FAILED"),
            getQueryRunResp: (0, mock_data_1.getQueryRunResponse)("QUERY_STATE_FAILED"),
            getQueryRunResultsResp: (0, mock_data_1.getQueryResultsResponse)("QUERY_STATE_FAILED"),
            getSqlStatementResp: (0, mock_data_1.getSqlStatementResponse)("t"),
            cancelQueryRunResp: (0, mock_data_1.cancelQueryRunResponse)(),
        });
        const queryIntegration = new query_integration_1.QueryIntegration(api);
        const result = yield queryIntegration.getQueryRun({ queryRunId: "123" });
        vitest_1.assert.equal(result.state, "QUERY_STATE_FAILED");
    }));
});
(0, vitest_1.describe)("getSqlStatement", () => {
    (0, vitest_1.it)("success", () => __awaiter(void 0, void 0, void 0, function* () {
        const api = (0, api_mocks_1.getMockApiClient)({
            createQueryResp: (0, create_query_run_1.createQueryRunResponse)("QUERY_STATE_SUCCESS"),
            getQueryRunResp: (0, mock_data_1.getQueryRunResponse)("QUERY_STATE_SUCCESS"),
            getQueryRunResultsResp: (0, mock_data_1.getQueryResultsResponse)("QUERY_STATE_SUCCESS"),
            getSqlStatementResp: (0, mock_data_1.getSqlStatementResponse)("123"),
            cancelQueryRunResp: (0, mock_data_1.cancelQueryRunResponse)(),
        });
        const queryIntegration = new query_integration_1.QueryIntegration(api);
        const result = yield queryIntegration.getSqlStatement({ sqlStatementId: "123" });
        vitest_1.assert.equal(result.id, "123");
    }));
});
(0, vitest_1.describe)("cancelQueryRun", () => {
    (0, vitest_1.it)("success", () => __awaiter(void 0, void 0, void 0, function* () {
        const api = (0, api_mocks_1.getMockApiClient)({
            createQueryResp: (0, create_query_run_1.createQueryRunResponse)("QUERY_STATE_CANCELLED"),
            getQueryRunResp: (0, mock_data_1.getQueryRunResponse)("QUERY_STATE_CANCELLED"),
            getQueryRunResultsResp: (0, mock_data_1.getQueryResultsResponse)("QUERY_STATE_CANCELLED"),
            getSqlStatementResp: (0, mock_data_1.getSqlStatementResponse)("123"),
            cancelQueryRunResp: (0, mock_data_1.cancelQueryRunResponse)("QUERY_STATE_CANCELLED"),
        });
        const queryIntegration = new query_integration_1.QueryIntegration(api);
        const result = yield queryIntegration.cancelQueryRun({ queryRunId: "123" });
        vitest_1.assert.equal(result.state, "QUERY_STATE_CANCELLED");
    }));
});
(0, vitest_1.describe)("run", () => {
    (0, vitest_1.it)("run success", () => __awaiter(void 0, void 0, void 0, function* () {
        const api = (0, api_mocks_1.getMockApiClient)({
            createQueryResp: (0, create_query_run_1.createQueryRunResponse)("QUERY_STATE_SUCCESS"),
            getQueryRunResp: (0, mock_data_1.getQueryRunResponse)("QUERY_STATE_SUCCESS"),
            getQueryRunResultsResp: (0, mock_data_1.getQueryResultsResponse)("QUERY_STATE_SUCCESS"),
            getSqlStatementResp: (0, mock_data_1.getSqlStatementResponse)("t"),
            cancelQueryRunResp: (0, mock_data_1.cancelQueryRunResponse)(),
        });
        const queryIntegration = new query_integration_1.QueryIntegration(api);
        const result = yield queryIntegration.run(defaultQueryData);
        vitest_1.assert.equal(result.status, types_1.QueryStatusFinished);
    }));
});
(0, vitest_1.describe)("run: api_error", () => {
    (0, vitest_1.it)("#createQuery ApiError", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const api = (0, api_mocks_1.getMockApiClient)({
            createQueryResp: (0, create_query_run_1.createQueryRunResponse)("QUERY_STATE_READY", {
                code: -32164,
                message: "DataSourceNotFound",
                data: {},
            }),
            getQueryRunResp: (0, mock_data_1.getQueryRunResponse)(),
            getQueryRunResultsResp: (0, mock_data_1.getQueryResultsResponse)(),
            getSqlStatementResp: (0, mock_data_1.getSqlStatementResponse)("t"),
            cancelQueryRunResp: (0, mock_data_1.cancelQueryRunResponse)(),
        });
        const queryIntegration = new query_integration_1.QueryIntegration(api);
        const result = yield queryIntegration.run(defaultQueryData);
        vitest_1.assert.equal(result.error instanceof __1.ApiError, true);
        vitest_1.assert.notEqual((_a = result.error) === null || _a === void 0 ? void 0 : _a.message, null);
    }));
    // it("#getQueryResult user error", async () => {
    //   const api = getMockApiClient({
    //     createQueryResp: createQueries.noError,
    //     getQueryResultResp: getQueryResult.userError,
    //   });
    //   const queryIntegration = new QueryIntegration(api);
    //   const result = await queryIntegration.run(defaultQueryData);
    //   assert.equal(result.error?.errorType, ERROR_TYPES.user_error);
    //   assert.notEqual(result.error?.message, null);
    // });
    // it("#getQueryResult sql exec error", async () => {
    //   const api = getMockApiClient({
    //     createQueryResp: createQueries.noError,
    //     getQueryResultResp: getQueryResult.sqlExecError,
    //   });
    //   const queryIntegration = new QueryIntegration(api);
    //   const result = await queryIntegration.run(defaultQueryData);
    //   assert.equal(result.error?.errorType, ERROR_TYPES.query_run_execution_error);
    //   assert.notEqual(result.error?.message, null);
    // });
});
// describe("run: timeout_error", () => {
//   it("query is pending", async () => {
//     const api = getMockApiClient({
//       createQueryResp: createQueries.noError,
//       getQueryResultResp: getQueryResult.noErrorPending,
//     });
//     const queryIntegration = new QueryIntegration(api, {
//       ttlMinutes: 1,
//       cached: false,
//       timeoutMinutes: 0.01,
//       retryIntervalSeconds: 0.001,
//       pageNumber: 1,
//       pageSize: 100,
//     });
//     const result = await queryIntegration.run(defaultQueryData);
//     assert.equal(result.error?.errorType, ERROR_TYPES.query_run_timeout_error);
//     assert.notEqual(result.error?.message, null);
//   });
//   it("query is rate limited", async () => {
//     const api = getMockApiClient({
//       createQueryResp: createQueries.rateLimitError,
//       getQueryResultResp: getQueryResult.noErrorPending,
//     });
//     const queryIntegration = new QueryIntegration(api, {
//       ttlMinutes: 1,
//       cached: false,
//       timeoutMinutes: 0.01,
//       retryIntervalSeconds: 0.001,
//       pageNumber: 1,
//       pageSize: 100,
//     });
//     const result = await queryIntegration.run(defaultQueryData);
//     assert.equal(result.error?.errorType, ERROR_TYPES.query_run_rate_limit_error);
//     assert.notEqual(result.error?.message, null);
//   });
// });
//# sourceMappingURL=query-integration.test.js.map