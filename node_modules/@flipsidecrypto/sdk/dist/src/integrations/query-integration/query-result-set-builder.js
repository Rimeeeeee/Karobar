"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _QueryResultSetBuilder_instances, _QueryResultSetBuilder_createRecords, _QueryResultSetBuilder_computeRunStats;
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryResultSetBuilder = void 0;
const errors_1 = require("../../errors");
const types_1 = require("../../types");
class QueryResultSetBuilder {
    constructor({ getQueryRunResultsRpcResult, getQueryRunRpcResult, error }) {
        _QueryResultSetBuilder_instances.add(this);
        this.error = error;
        if (!getQueryRunResultsRpcResult || !getQueryRunRpcResult) {
            this.queryId = null;
            this.status = null;
            this.columns = null;
            this.columnTypes = null;
            this.rows = null;
            this.runStats = null;
            this.records = null;
            this.page = null;
            return;
        }
        this.queryId = getQueryRunRpcResult.queryRun.id;
        this.status = (0, types_1.mapApiQueryStateToStatus)(getQueryRunRpcResult.queryRun.state);
        this.columns = getQueryRunResultsRpcResult.columnNames;
        this.columnTypes = getQueryRunResultsRpcResult.columnTypes;
        this.rows = getQueryRunResultsRpcResult.rows;
        this.runStats = __classPrivateFieldGet(this, _QueryResultSetBuilder_instances, "m", _QueryResultSetBuilder_computeRunStats).call(this, getQueryRunRpcResult);
        this.records = __classPrivateFieldGet(this, _QueryResultSetBuilder_instances, "m", _QueryResultSetBuilder_createRecords).call(this, getQueryRunResultsRpcResult);
        this.page = getQueryRunResultsRpcResult.page;
    }
}
exports.QueryResultSetBuilder = QueryResultSetBuilder;
_QueryResultSetBuilder_instances = new WeakSet(), _QueryResultSetBuilder_createRecords = function _QueryResultSetBuilder_createRecords(getQueryRunResultsRpcResult) {
    if (!getQueryRunResultsRpcResult || !getQueryRunResultsRpcResult.columnNames || !getQueryRunResultsRpcResult.rows) {
        return null;
    }
    let columnNames = getQueryRunResultsRpcResult.columnNames;
    return getQueryRunResultsRpcResult.rows.map((row) => {
        let record = {};
        row.forEach((value, index) => {
            record[columnNames[index].toLowerCase()] = value;
        });
        return record;
    });
}, _QueryResultSetBuilder_computeRunStats = function _QueryResultSetBuilder_computeRunStats(getQueryRunRpcResult) {
    const queryRun = getQueryRunRpcResult.queryRun;
    if (!queryRun.startedAt ||
        !queryRun.endedAt ||
        !queryRun.createdAt ||
        !queryRun.queryStreamingEndedAt ||
        !queryRun.queryRunningEndedAt) {
        throw new errors_1.UnexpectedSDKError("Query run is missing required fields: `startedAt`, `endedAt`, `createdAt`, `queryStreamingEndedAt`, `queryRunningEndedAt`");
    }
    const createdAt = new Date(queryRun.createdAt);
    const startTime = new Date(queryRun.startedAt);
    const endTime = new Date(queryRun.endedAt);
    const streamingEndTime = new Date(queryRun.queryStreamingEndedAt);
    const queryExecEndAt = new Date(queryRun.queryRunningEndedAt);
    return {
        startedAt: startTime,
        endedAt: endTime,
        elapsedSeconds: (endTime.getTime() - startTime.getTime()) / 1000,
        queryExecStartedAt: startTime,
        queryExecEndedAt: queryExecEndAt,
        streamingStartedAt: queryExecEndAt,
        streamingEndedAt: streamingEndTime,
        queuedSeconds: (startTime.getTime() - createdAt.getTime()) / 1000,
        streamingSeconds: (streamingEndTime.getTime() - queryExecEndAt.getTime()) / 1000,
        queryExecSeconds: (queryExecEndAt.getTime() - startTime.getTime()) / 1000,
        bytes: queryRun.totalSize ? queryRun.totalSize : 0,
        recordCount: queryRun.rowCount ? queryRun.rowCount : 0,
    };
};
//# sourceMappingURL=query-result-set-builder.js.map