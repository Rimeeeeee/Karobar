"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Api_instances, _Api_baseUrl, _Api_headers, _Api_handleResponse;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = void 0;
const xior_1 = __importDefault(require("xior"));
const errors_1 = require("./errors");
const types_1 = require("./types");
const PARSE_ERROR_MSG = "the api returned an error and there was a fatal client side error parsing that error msg";
const axios = xior_1.default.create();
class Api {
    constructor(baseUrl, apiKey) {
        _Api_instances.add(this);
        _Api_baseUrl.set(this, void 0);
        _Api_headers.set(this, void 0);
        __classPrivateFieldSet(this, _Api_baseUrl, baseUrl, "f");
        this.url = this.getUrl();
        __classPrivateFieldSet(this, _Api_headers, {
            Accept: "application/json",
            "Content-Type": "application/json",
            "x-api-key": apiKey,
        }, "f");
    }
    getUrl() {
        return `${__classPrivateFieldGet(this, _Api_baseUrl, "f")}/json-rpc`;
    }
    createQuery(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            const request = new types_1.CreateQueryRunRpcRequestImplementation([params]);
            try {
                result = yield axios.post(this.url, request, { headers: __classPrivateFieldGet(this, _Api_headers, "f") });
            }
            catch (err) {
                let errData = err;
                result = errData.response;
                if (!result) {
                    throw new errors_1.UnexpectedSDKError(errData.message);
                }
            }
            const data = __classPrivateFieldGet(this, _Api_instances, "m", _Api_handleResponse).call(this, result, "createQueryRun");
            return new types_1.CreateQueryRunRpcResponseImplementation(data.id, data.result, data.error);
        });
    }
    getQueryRun(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            const request = new types_1.GetQueryRunRpcRequestImplementation([params]);
            try {
                result = yield axios.post(this.url, request, { headers: __classPrivateFieldGet(this, _Api_headers, "f") });
            }
            catch (err) {
                let errData = err;
                result = errData.response;
                if (!result) {
                    throw new errors_1.UnexpectedSDKError(errData.message);
                }
            }
            const data = __classPrivateFieldGet(this, _Api_instances, "m", _Api_handleResponse).call(this, result, "getQueryRun");
            return new types_1.GetQueryRunRpcResponseImplementation(data.id, data.result, data.error);
        });
    }
    getQueryResult(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            const request = new types_1.GetQueryRunResultsRpcRequestImplementation([params]);
            try {
                result = yield axios.post(this.url, request, { headers: __classPrivateFieldGet(this, _Api_headers, "f") });
            }
            catch (err) {
                let errData = err;
                result = errData.response;
                if (!result) {
                    throw new errors_1.UnexpectedSDKError(errData.message);
                }
            }
            const data = __classPrivateFieldGet(this, _Api_instances, "m", _Api_handleResponse).call(this, result, "getQueryRunResults");
            return new types_1.GetQueryRunResultsRpcResponseImplementation(data.id, data.result, data.error);
        });
    }
    getSqlStatement(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            const request = new types_1.GetSqlStatementRequestImplementation([params]);
            try {
                result = yield axios.post(this.url, request, { headers: __classPrivateFieldGet(this, _Api_headers, "f") });
            }
            catch (err) {
                let errData = err;
                result = errData.response;
                if (!result) {
                    throw new errors_1.UnexpectedSDKError(PARSE_ERROR_MSG);
                }
            }
            const data = __classPrivateFieldGet(this, _Api_instances, "m", _Api_handleResponse).call(this, result, "getSqlStatement");
            return new types_1.GetSqlStatementResponseImplementation(data.id, data.result, data.error);
        });
    }
    cancelQueryRun(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            const request = new types_1.CancelQueryRunRpcRequestImplementation([params]);
            try {
                result = yield axios.post(this.url, request, { headers: __classPrivateFieldGet(this, _Api_headers, "f") });
            }
            catch (err) {
                let errData = err;
                result = errData.response;
                if (!result) {
                    throw new errors_1.UnexpectedSDKError(PARSE_ERROR_MSG);
                }
            }
            const data = __classPrivateFieldGet(this, _Api_instances, "m", _Api_handleResponse).call(this, result, "cancelQueryRun");
            return new types_1.CancelQueryRunRpcResponseImplementation(data.id, data.result, data.error);
        });
    }
}
exports.Api = Api;
_Api_baseUrl = new WeakMap(), _Api_headers = new WeakMap(), _Api_instances = new WeakSet(), _Api_handleResponse = function _Api_handleResponse(result, method) {
    if (result.status === undefined) {
        throw new errors_1.ServerError(0, `Unable to connect to server when calling '${method}'. Please try again later.`);
    }
    if (result.status >= 500) {
        throw new errors_1.ServerError(result.status, `Unknown server error when calling '${method}': ${result.status} - ${result.statusText}. Please try again later.`);
    }
    if (result.status === 401 || result.status === 403) {
        throw new errors_1.UserError(result.status, "Unauthorized: Invalid API Key.");
    }
    try {
        const data = result.data;
        return data;
    }
    catch (error) {
        throw new errors_1.ServerError(result.status, `Unable to parse response for RPC response from '${method}': ${result.status} - ${result.statusText}. Please try again later.`);
    }
};
//# sourceMappingURL=api.js.map